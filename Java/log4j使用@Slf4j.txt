1.gradle+lombok使用@Slf4j注解log日志编译报错：找不到符号log
安装lombok插件，Settings->Build,Execution,Deployment->Anonotation Processors->Enable annotation processing
build.gradle的dependencies添加：
implementation 'org.projectlombok:lombok:1.18.28'
annotationProcessor 'org.projectlombok:lombok:1.18.28'
implementation 'org.slf4j:slf4j-log4j12:2.0.7'


2.gradle项目使用lombok的@Slf4j注解输出日志报错：
log4j:WARN No appenders could be found for logger (com.frank.Log4jDemo).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.

可能原因：
1.缺失log4j.properties或log4j.xml配置文件；
在resources目录下面新建log4j.properties文件
2.log4j.properties配置文件为放在source文件夹下；
进Project Settings标记目录resources为Resources
3.log4j.properties配置文件编码不正确；
例如：
# Global logging configuration
log4j.rootLogger=DEBUG, stdout
# Console output...
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n

[level] 是日志输出级别，共有5级：
ALL 各级包括自定义级别
DEBUG 指定细粒度信息事件是最有用的应用程序调试
ERROR 错误事件可能仍然允许应用程序继续运行
FATAL 指定非常严重的错误事件，这可能导致应用程序中止
INFO 指定能够突出在粗粒度级别的应用程序运行情况的信息的消息
OFF 这是最高等级，为了关闭日志记录
TRACE 指定细粒度比DEBUG更低的信息事件
WARN 指定具有潜在危害的情况

Appender 为日志输出目的地，Log4j提供的appender有以下几种：
org.apache.log4j.ConsoleAppender（控制台），
org.apache.log4j.FileAppender（文件），
org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

Layout：日志输出格式，Log4j提供的layout有以下几种：
org.apache.log4j.HTMLLayout（以HTML表格形式布局），
org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
Layouts提供四种日志输出样式，如根据HTML样式、自由指定样式、包含日志级别与信息的样式和包含日志时间、线程、类别等信息的样式。

打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:
　  %m   输出代码中指定的消息
　　%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
　　%r   输出自应用启动到输出该log信息耗费的毫秒数
　　%c   输出所属的类目，通常就是所在类的全名
　　%t   输出产生该日志事件的线程名
　　%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
　　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22:10:28,921  
　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)