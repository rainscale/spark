Shell注释
单行注释
以 # 开头的行就是注释，会被解释器忽略。
通过每一行加一个#号设置多行注释

多行注释
使用 Here文档
多行注释还可以使用以下格式：
:<<EOF
注释内容...
注释内容...
注释内容...
EOF
以上例子中，: 是一个空命令，用于执行后面的 Here 文档，<<'EOF' 表示开启 Here 文档，COMMENT 是 Here 文档的标识符，在这两个标识符之间的内容都会被视为注释，不会被执行。
EOF也可以使用其他符号:
:<<'COMMENT'
这是注释的部分。
可以有多行内容。
COMMENT

:<<'
注释内容...
注释内容...
注释内容...
'

:<<!
注释内容...
注释内容...
注释内容...
!

直接使用 : 号
我们也可以使用了冒号:命令，并用单引号'将多行内容括起来。由于冒号是一个空命令，这些内容不会被执行。
格式为：: + 空格 + 单引号。
如：
: '
这是注释的部分。
可以有多行内容。
'

Shell传递参数
参数处理                 说明
$0             执行的文件名
$n             n代表一个数字，1为执行脚本的第一个参数，2为执行脚本的第二个参数，以此类推……
$#             传递到脚本的参数个数
$*             以一个单字符串显示所有向脚本传递的参数。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$$             脚本运行的当前进程ID号
$!             后台运行的最后一个进程的ID号
$@             与$*相同，但是使用时加引号，并在引号中返回每个参数。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$-             显示Shell使用的当前选项，与set命令功能相同。
$?             显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。

$* 与 $@ 区别：
相同点：都是引用所有参数。
不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 "*" 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。

变量类型
运行shell时，会同时存在三种变量：
1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。

Shell字符串
单引号字符串的限制：
单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
单引号字符串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。
name="John"
str="Hello, I know you are \"$name\"!\n"
echo -e $str # Hello, I know you are "John"!
             #
双引号的优点：
双引号里可以有变量
双引号里可以出现转义字符
拼接字符串
# 使用双引号拼接
greeting="hello, "$name" !"
greeting_1="hello, ${name} !"
echo $greeting  $greeting_1 # hello, John! hello, John!
# 使用单引号拼接
greeting_2='hello, '$name' !'
greeting_3='hello, ${name} !'
echo $greeting_2  $greeting_3 # hello, John! hello, ${name}!

# 获取字符串长度
echo ${#name} # 4

提取子字符串
以下实例从字符串第2个字符开始截取4个字符：
str="google is a great site"
echo ${str:1:4} # 输出 oogl

查找子字符串
查找字符 i或 o的位置(哪个字母先出现就计算哪个)：
str="google is a great site"
echo `expr index "$str" io`  # 输出2

Shell数组
bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。

定义数组
在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
数组名=(值1 值2 ... 值n)
例如：
array_name=(value0 value1 value2 value3)
或者
array_name=(
value0
value1
value2
value3
)
还可以单独定义数组的各个分量：
array_name[0]=value0
array_name[1]=value1
array_name[n]=valuen
可以不使用连续的下标，而且下标的范围没有限制。

读取数组
读取数组元素值的一般格式是：
${数组名[下标]}
例如：
valuen=${array_name[n]}
使用@或*可以获取数组中的所有元素，例如：
echo ${array_name[@]}
或者
echo ${array_name[*]}
获取数组的长度
获取数组长度的方法与获取字符串长度的方法相同，例如：
取得数组元素的个数
length=${#array_name[@]}
或者
length=${#array_name[*]}
取得数组单个元素的长度
length=${#array_name[n]}

