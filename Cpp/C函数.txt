1.进程状态
 从程序员的角度，我们可以认为进程总是处于下面三种状态之一：
（1）运行。进程要么在CPU上执行，要么在等待被执行且最终会被内核调度。
（2）停止。进程的执行被挂起（suspended），且不会被调度。当收到SIGSTOP、SIGTSTP、SIGTTIN或者SIGTTOU信号时，进程就停止，并且保持停止直到他收到一个SIGCONT信号，在这个时刻，进程再次开始运行。
（3）终止。进程永远的停止了。进程会因为三种原因终止：第一、收到一个信号，信号的默认行为是终止进程。第二、从主程序返回。第三、调用exit函数
2.回收子进程
        当一个进程由于某种原因终止时，内核并不是立即把它从系统中清除 。相反，进程被保持在一种已终止的状态中，直到被它的父进程回收(reaped)。 当父进程回收已终止的子进程时，内核将子进程的退出状态传递给父进程，然后抛弃已终止的进程，从此时开始，该进程就不存在了 。一个终止了但还未被回收的进程称为僵死进程 (zombie)。如果一个进程在回收他的子进程之前就终止了，那他的子进程被称为孤儿进程。
        如果一个父进程终止了，内核会安排init进程成为它的孤儿进程的养父。init进程的PID为1, 是在系统启动时由内核创建的 ，它不会终止 ，是所有进程的祖先 。如果父进程没有回收它的僵死子进程就终止了，那么内核会安排 init 进程去回收它们 。不过，长时间运行的程序，比如 shell 或者服务器，总是应该回收它们的僵死子进程 。即使僵死子进程没有运行，它们仍然消耗系统的内存资源。
        一个进程可以通过调用waitpid函数来等待它的子进程终止或者停止。

pthread_create
函数说明：pthread_create是类Unix操作系统（Unix、Linux、Mac OS X等）的创建线程的函数。它的功能是创建线程（实际上就是确定调用该线程函数的入口点），在线程创建以后，就开始运行相关的线程函数。
返回成功时，由tidp指向的内存单元被设置为新创建线程的线程ID。attr参数用于指定各种不同的线程属性。新创建的线程从start_rtn函数的地址开始运行，该函数只有一个万能指针参数arg，如果需要向start_rtn函数传递的参数不止一个，那么需要把这些参数放到一个结构中，然后把这个结构的地址作为arg的参数传入。
参数：
第一个参数为指向线程标识符的指针。
第二个参数用来设置线程属性。
第三个参数是线程运行函数的起始地址。
最后一个参数是运行函数的参数。
返回值:若成功，返回0；若出错，返回出错编号。
linux下用C语言开发多线程程序，Linux系统下的多线程遵循POSIX线程接口，称为pthread。因为pthread并非Linux系统的默认库，而是POSIX线程库。在Linux中将其作为一个库来使用，因此加上 -lpthread（或-pthread）以显式链接该库。函数在执行错误时的错误信息将作为返回值返回，并不修改系统全局变量errno，当然也无法使用perror打印错误信息。
函数定义：int pthread_create(pthread_t *tidp, const pthread_attr_t *attr, void* (*start_rtn)(void*), void *arg);
头文件：pthread.h

pthread_join
函数说明：等待一个线程的结束,线程间同步的操作。以阻塞的方式等待thread指定的线程结束。当函数返回时，被等待线程的资源被收回。如果线程已经结束，那么该函数会立即返回。并且thread指定的线程必须是joinable的。
参数 ：
thread: 线程标识符，即线程ID，标识唯一线程。
retval: 用户定义的指针，用来存储被等待线程的返回值。
返回值 ： 0代表成功。 失败，返回的则是错误号。
EDEADLK：检测到线程发生了死锁。
EINVAL：分为两种情况，要么目标线程本身不允许其它线程获取它的返回值，要么事先就已经有线程调用 pthread_join()函数获取到了目标线程的返回值。
ESRCH：找不到指定的thread线程。
在Linux中，默认情况下是在一个线程被创建后，必须使用此函数对创建的线程进行资源回收，但是可以设置Threads attributes来设置当一个线程结束时，直接回收此线程所占用的系统资源，详细资料查看Threads attributes。
其实在Linux中，新建的线程并不是在原先的进程中，而是系统通过一个系统调用clone( )。该系统调用copy了一个和原先进程完全一样的进程，并在这个进程中执行线程函数。不过这个copy过程和fork不一样。 copy后的进程和原先的进程共享了所有的变量，运行环境。这样，原先进程中的变量变动在copy后的进程中便能体现出来。
代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。
所有线程都有一个线程号，也就是Thread ID。其类型为pthread_t。通过调用pthread_self( )函数可以获得自身的线程号。
一个线程的结束有两种途径，一种是函数结束了，调用它的线程也就结束了；另一种方式是通过函数pthread_exit来实现。另外需要说明的是，一个线程不能被多个线程等待，也就是说对一个线程只能调用一次pthread_join，否则只有一个能正确返回，其他的将返回ESRCH错误。
在前面我们提到，可以通过pthread_join()函数来使主线程阻塞等待其他线程退出，这样主线程可以清理其他线程的环境。但是还有一些线程，更喜欢自己来清理退出的状态，他们也不愿意主线程调用pthread_join来等待他们。我们将这一类线程的属性称为detached。如果我们在调用pthread_create()函数的时候将属性设置为NULL，则表明我们希望所创建的线程采用默认的属性，也就是joinable。如果需要将属性设置为detached，则参考下面的例子：
	pthread_t thread_id;
    pthread_attr_t attr;
    pthread_attr_init(&attr);
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
    pthread_create(&thread_id, &attr, start_run, NULL);
    pthread_attr_destroy(&attr);
在线程设置为joinable后，可以调用pthread_detach()使之成为detached。但是相反的操作则不可以。还有，如果线程已经调用pthread_join()后，则再调用pthread_detach()则不会有任何效果。
函数定义：int pthread_join(pthread_t thread, void** retval);
头文件：thread.h

pthread_detach
函数说明：创建一个线程默认的状态是joinable, 如果一个线程结束运行但没有被join，则它的状态类似于进程中的Zombie Process，即还有一部分资源没有被回收（退出状态码），
所以创建线程者应该pthread_join来等待线程运行结束，并可得到线程的退出代码，回收其资源（类似于wait,waitpid），但是调用pthread_join(pthread_id)后，
如果该线程没有运行结束，调用者会被阻塞，在有些情况下我们并不希望如此，比如在Web服务器中当主线程为每个新来的链接创建一个子线程进行处理的时候，
主线程并不希望因为调用pthread_join而阻塞（因为还要继续处理之后到来的链接），这时可以在子线程中加入代码pthread_detach(pthread_self())
或者父线程调用pthread_detach(thread_id)（非阻塞，可立即返回），这将该子线程的状态设置为detached，则该线程运行结束后会自动释放所有资源。
返回值:若成功，返回0；若出错，返回出错编号。
不能对一个已经处于detach状态的线程调用pthread_join，这样的调用将返回EINVAL错误。
函数定义：int pthread_detach(pthread_t thread);
头文件：pthread.h

pthread_exit
函数说明：线程通过调用pthread_exit函数终止执行，就如同进程在结束时调用exit函数一样。这个函数的作用是，终止调用它的线程并返回一个指向某个对象的指针。这个对象的指针可以通过pthread_join第二个参数获取。
函数定义：void pthread_exit(void* retval);
头文件：pthread.h

waitpid
函数说明：暂停目前进程执行的函数，waitpid会暂时停止进程的执行，直到有信号来到或子进程结束。
如果在调用 waitpid()时子进程已经结束，则 waitpid()会立即返回子进程结束状态值。 子进程的结束状态值会由参数status返回，而子进程的进程识别码也会一起返回。
status参数将保存子进程的状态信息，有了这个信息父进程就可以了解子进程为什么会退出，是正常退出还是出了什么错误。
如果不在意结束状态值,则参数 status可以设成 NULL。参数 pid为欲等待的子进程识别码,其他数值意义如下:
pid < -1 等待进程组识别码为 pid绝对值的任何子进程。
pid = -1 等待任何子进程，此时的waitpid()函数就退化成了普通的wait()函数。
pid = 0 等待进程组识别码与进程相同的任何子进程，也就是说任何和调用waitpid()函数的进程在同一个进程组的进程。
pid > 0 等待任何子进程识别码为 pid的子进程。
参数options提供了一些额外的选项来控制waitpid，参数 option可以为0或可以用"|"运算符把它们连接起来使用，比如：
ret = waitpid(-1, NULL, WNOHANG | WUNTRACED);
表示立即返回，如果等待集合中的子进程都没有被停止或终止，则返回值为0；如果有一个停止或终止，则返回值为该子进程的PID。
如果我们不想使用它们，也可以把options设为0，如：
ret = waitpid(-1, NULL, 0);
默认情况下(当 options=0时)，waitpid挂起调用进程的执行，直到它的等待集合 (wait set) 中的一个子进程终止。如果等待集合中的一个进程在刚调用的时刻就已经终止了，
那么waitpid就立即返回 。在这两种情况中，waitpid返回导致waitpid返回的已终止子进程的PID，此时已终止的子进程已经被回收，内核会从系统中删除掉它的所有痕迹。
WNOHANG: 如果等待集合中的任何子进程都还没有终止，那么就立即返回(返回值为0)。若结束，则返回该子进程的ID。 
默认的行为是挂起调用进程，直到有子进程终止 。在等待子进程终止的同时，如果还想做些有用的工作，这个选项会有用。
WUNTRACED: 若子进程进入暂停状态，则马上返回，但子进程的结束状态不予以理会。WIFSTOPPED(status)宏确定返回值是否对应于一个暂停子进程。
挂起调用进程的执行，直到等待集合中的一个进程变成已终止或者被停止 。返回的PID为导致返回的已终止或被停止子进程的PID。
默认的行为是只返回已终止的子进程。当你想要检査已终止和被停止的子进程时，这个选项会有用。
WCONTINUED: 挂起调用进程的执行，直到等待集合中一个正在运行的进程终止或等待集合中一 个被停止的进程收到 SIGCONT信号重新开始执行。
子进程的结束状态返回后存于status，底下有几个宏可判别结束情况:
WIFEXITED(status)如果若为正常结束子进程返回的状态，则为真；对于这种情况可执行WEXITSTATUS(status)，取子进程传给exit或_exit的低8位。
WEXITSTATUS(status)取得子进程 exit()返回的结束代码,一般会先用 WIFEXITED来判断是否正常结束才能使用此宏。
WIFSIGNALED(status)若为异常结束子进程返回的状态，则为真；对于这种情况可执行WTERMSIG(status)，取使子进程结束的信号编号。
WTERMSIG(status) 取得子进程因信号而中止的信号代码,一般会先用 WIFSIGNALED来判断后才使用此宏。
WIFSTOPPED(status) 若为当前暂停子进程返回的状态，则为真；对于这种情况可执行WSTOPSIG(status)，取使子进程暂停的信号编号。
WSTOPSIG(status) 取得引发子进程暂停的信号代码,一般会先用 WIFSTOPPED来判断后才使用此宏。
如果执行成功则返回子进程识别码(PID)，如果有错误发生则返回值-1。失败原因存于errno中。
如果调用进程没有子进程，那么waitpid返回-1, 并且设置errno为ECHILD。 如果waitpid函数被一个信号中断，那么它返回-1，并设置errno为EINTR。
函数定义：pid_t waitpid(pid_t pid, int* status, int options);
头文件：sys/wait.h

signal
函数说明：指定使用signum指定的信号编号处理信号的方法。 参数handler指定程序可以处理信号的三种方式之一：
默认处理（SIG_DFL）：信号由该特定信号的默认动作处理。
忽略信号（SIG_IGN）：忽略信号，即使没有意义，代码执行仍将继续。
函数处理程序：定义一个特定的函数来处理信号。
传递给信号处理例程的整数参数是信号值，这样可以使得一个信号处理例程处理多个信号。系统调用signal返回值是指定信号signum前一次的处理例程或者错误时返回错误代码SIG_ERR。
函数定义：void (*signal(int signum, void (*handler)(int)))(int);
或者这么理解：
typedef void (*sighandler_t)(int);
sighandler_t signal(int signum, sighandler_t handler);
头文件：signal.h

sigaction
函数说明：一种用于注册信号处理函数的高级方法，是为替代signal来设计的较稳定的信号处理。
signal的使用比较简单。signal(signalNO,signalproc);
但是signal不能完成的任务是：
1.不知道信号产生的原因；
2.处理信号中不能阻塞其他的信号
而signaction，则可以设置比较多的消息。尤其是在信号处理函数过程中接受信号，进行何种处理。
signum：指示要处理的信号，是一个signum.h宏定义。
act：设置信号处理程序的信息。
oldact：保存信号处理程序的信息，如果不关心可以为 NULL。
struct sigaction {
    void (*sa_handler)(int);       // 信号处理函数指针，或者是特定的常量值
    void (*sa_sigaction)(int, siginfo_t*, void*);   // 用于处理信号的高级函数指针
    sigset_t sa_mask;              // 信号掩码
    int sa_flags;                  // 附加标志
    void (*sa_restorer)(void);     // 恢复函数指针
};
sa_handler 字段指定一个Handler函数的入口地址。或者是特定的常量值，如果sa_handler指定为SIG_IGN（忽略信号）或 SIG_DFL（采用默认操作），则sa_sigaction和sa_restorer字段将被忽略。
sa_sigaction 字段指定了一个高级信号处理函数，可以获取有关信号的更多信息，如：信号来源，信号的时间戳等。
sa_mask 字段用于设置信号掩码。当handler运行时，该掩码用于阻止其他信号的干扰。如果在信号处理函数执行期间不希望阻止任何信号，
则应该使用sigemptyset函数来清空信号集，这样不会阻止任何信号。相反，如果使用sigfillset函数，例如：sigfillset(&sa.sa_mask)，
则会将所有信号添加到信号集中，这将导致处理函数在执行期间被阻塞，可能会导致进一步的问题。
sa_mask指定在信号处理程序执行过程中，哪些信号应当被阻塞。缺省情况下当前信号本身被阻塞，防止信号的嵌套发送，除非指定SA_NODEFER或者SA_NOMASK标志位。
注：请注意sa_mask指定的信号阻塞的前提条件是:在由sigaction()安装信号的处理函数执行过程中由sa_mask指定的信号才被阻塞。
sa_flags中包含了许多标志位，包括刚刚提到的SA_NODEFER及SA_NOMASK标志位。另一个比较重要的标志位是 SA_SIGINFO，当设定了该标志位时，表示信号附带的参数可以被传递到信号处理函数中，因此，应该为sigaction结构中的 sa_sigaction指定处理函数，而不应该为sa_handler指定信号处理函数，否则，设置该标志变得毫无意义。即使为 sa_sigaction指定了信号处理函数，如果不设置SA_SIGINFO，信号处理函数同样不能得到信号传递过来的数据，
在信号处理函数中对这些信息的访问都将导致段错误（Segmentation fault）。
sa_flags 字段是附加标志，可以用于控制handler的行为。用来设置信号处理的其他相关操作，下列的数值可用。OR运算（|）组合。
SA_NOCLDSTOP : 使父进程在它的子进程暂停或继续运行时不会收到SIGCHLD信号。
SA_RESTART:被信号中断的系统调用会自行重启。
SA_NODEFER:在运行信号的处理函数时再次收到当前的信号，也会触发新处理函数调用。
例如：SA_RESTART标志可以指定系统调用被信号中断后自动重启，从而避免了系统调用被中断而导致的错误。
sa_restorer 字段是一个指向恢复函数的指针。恢复函数用于在handler完成后将控制返回给原始程序。在大多数情况下，此字段不需要设置。
返回值：执行成功则返回0，如果有错误则返回-1。
错误代码
EINVAL：参数signum不合法，或是企图拦截SIGKILL/SIGSTOPSIGKILL信号
EFAULT：参数act，oldact指针地址无法存取。
EINTR：此调用被中断
函数定义：int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
头文件：signal.h

sigwait
函数说明：提供了一种等待信号的到来，以串行的方式从信号队列中取出信号进行处理的机制。sigwait()只等待函数参数中指定的信号集，即如果新产生的信号不在指定的信号集内，则 sigwait()继续等待。对于一个稳定可靠的程序，我们一般会有一些疑问：
不要在线程的信号掩码中阻塞不能被忽略处理的两个信号SIGSTOP和 SIGKILL。
不要在线程的信号掩码中阻塞SIGFPE、SIGILL、SIGSEGV、SIGBUS。
确保 sigwait()等待的信号集已经被进程中所有的线程阻塞。
在主线程或其它工作线程产生信号时，必须调用 kill()将信号发给整个进程，而不能使用 pthread_kill()发送某个特定的工作线程，否则信号处理线程无法接收到此信号。
因为 sigwait()使用了串行的方式处理信号的到来，为避免信号的处理存在滞后，或是非实时信号被丢失的情况，处理每个信号的代码应尽量简洁、快速，避免调用会产生阻塞的库函数。
返回值:若成功，返回0；若出错，返回出错编号。
函数定义：int sigwait(const sigset_t* set, int* signum);
头文件：signal.h

sigemptyset
函数说明：将参数set信号集初始化并清空。执行成功则返回0，如果有错误则返回-1。
错误代码：EFAULT 参数set指针地址无法存取。
函数定义：int sigemptyset(sigset_t *set);
头文件：signal.h

sigaddset
函数说明：在set指向的信号集中加入signum信号。执行成功则返回0，如果有错误则返回-1。
函数定义：int sigaddset(sigset_t* set, int signum);
头文件：signal.h

sigprocmask
函数说明：一个进程的信号掩码规定了当前阻塞而不能递送给该进程的信号集。sigprocmask()可以用来检测或改变目前的信号掩码，其操作依参数how来决定。
如果参数oldset不是NULL指针，那么目前的信号屏蔽字会由此指针返回。如果set是一个非空指针，则参数how指示如何修改当前信号屏蔽字。
每个进程都有一个用来描述哪些信号递送到进程时将被阻塞的信号集，该信号集中的所有信号在递送到进程后都将被阻塞。
参数how的取值不同，带来的操作行为也不同，该参数可选值如下：
SIG_BLOCK：该值代表的功能是将newset所指向的信号集中所包含的信号加到当前的信号掩码中，作为新的信号掩码(原有信号掩码 + set信号掩码)。
SIG_UNBLOCK:将参数newset所指向的信号集中的信号从当前的信号掩码中移除。
SIG_SETMASK:设置当前信号掩码为参数newset所指向的信号集中所包含的信号。
oldset记录之前的信号掩码，程序开始第一次调用sigprocmask()后，oldset里面理论上是不含有任何信号的。因为调用sigprocmask()前,我们没有去拦截任何信号
注意事项：sigprocmask()函数只为单线程的进程定义的，在多线程中要使用pthread_sigmask变量，在使用之前需要声明和初始化。
返回值：执行成功返回0，失败返回-1。
函数定义：int sigprocmask(int how, const sigset_t restrict set, sigset_t restrict oldset);
头文件：signal.h

系统信号
1.SIGHUP
本信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 通知同一session内的各个作业, 这时它们与控制终端不再关联。
登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个 Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进 程组和后台有终端输出的进程就会中止。不过可以捕获这个信号，比如wget能捕获SIGHUP信号，并忽略它，这样就算退出了Linux登录，wget也能继续下载。
2.SIGINT
程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl-C)时发出，用于通知前台进程组终止进程。
3.SIGQUIT
和SIGINT类似, 但由QUIT字符(通常是Ctrl-)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。
4.SIGILL
执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。
5.SIGTRAP
由断点指令或其它trap指令产生. 由debugger使用。
6.SIGABRT
调用abort函数生成的信号。
7.SIGBUS
非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)。
8.SIGFPE
在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。
9.SIGKILL
用来立即结束程序的运行. 本信号不能被阻塞、处理和忽略。如果管理员发现某个进程终止不了，可尝试发送这个信号。
10.SIGUSR1
留给用户使用
11.SIGSEGV
试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据.
12.SIGUSR2
留给用户使用
13.SIGPIPE
管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。
14.SIGALRM
时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号.
15.SIGTERM
程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出，shell命令kill缺省产生这个信号。如果进程终止不了，我们才会尝试SIGKILL。
17.SIGCHLD
子进程结束时, 父进程会收到这个信号。
如果父进程没有处理这个信号，也没有等待(wait)子进程，子进程虽然终止，但是还会在内核进程表中占有表项，这时的子进程称为僵尸进程。这种情 况我们应该避免(父进程或者忽略SIGCHILD信号，或者捕捉它，或者wait它派生的子进程，或者父进程先终止，这时子进程的终止自动由init进程 来接管)。
18.SIGCONT
让一个停止(stopped)的进程继续执行. 本信号不能被阻塞. 可以用一个handler来让程序在由stopped状态变为继续执行时完成特定的工作. 例如, 重新显示提示符
19.SIGSTOP
停止(stopped)进程的执行. 注意它和terminate以及interrupt的区别:该进程还未结束, 只是暂停执行. 本信号不能被阻塞, 处理或忽略.
20.SIGTSTP
停止进程的运行, 但该信号可以被处理和忽略. 用户键入SUSP字符时(通常是Ctrl-Z)发出这个信号
21.SIGTTIN
当后台作业要从用户终端读数据时, 该作业中的所有进程会收到SIGTTIN信号. 缺省时这些进程会停止执行.
22.SIGTTOU
类似于SIGTTIN, 但在写终端(或修改终端模式)时收到.
23.SIGURG
有”紧急”数据或out-of-band数据到达socket时产生.
24.SIGXCPU
超过CPU时间资源限制. 这个限制可以由getrlimit/setrlimit来读取/改变。
25.SIGXFSZ
当进程企图扩大文件以至于超过文件大小资源限制。
26.SIGVTALRM
虚拟时钟信号. 类似于SIGALRM, 但是计算的是该进程占用的CPU时间.
27.SIGPROF
类似于SIGALRM/SIGVTALRM, 但包括该进程用的CPU时间以及系统调用的时间.
28.SIGWINCH
窗口大小改变时发出.
29.SIGIO
文件描述符准备就绪, 可以开始进行输入/输出操作.
30.SIGPWR
Power failure
31.SIGSYS
非法的系统调用。
在以上列出的信号中，程序不可捕获、阻塞或忽略的信号有：SIGKILL,SIGSTOP
不能恢复至默认动作的信号有：SIGILL,SIGTRAP
默认会导致进程流产的信号有：SIGABRT,SIGBUS,SIGFPE,SIGILL,SIGIOT,SIGQUIT,SIGSEGV,SIGTRAP,SIGXCPU,SIGXFSZ
默认会导致进程退出的信号有：SIGALRM,SIGHUP,SIGINT,SIGKILL,SIGPIPE,SIGPOLL,SIGPROF,SIGSYS,SIGTERM,SIGUSR1,SIGUSR2,SIGVTALRM
默认会导致进程停止的信号有：SIGSTOP,SIGTSTP,SIGTTIN,SIGTTOU
默认进程忽略的信号有：SIGCHLD,SIGPWR,SIGURG,SIGWINCH

