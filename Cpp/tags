!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/spark/Works/spark/Cpp/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/8c02af0fa/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
*.tcc	.vscode/settings.json	/^        "*.tcc": "cpp",$/;"	s	object:files.associations
0	.vscode/c_cpp_properties.json	/^                "${workspaceFolder}\/**",$/;"	s	array:configurations.0.includePath
0	.vscode/c_cpp_properties.json	/^        {$/;"	o	array:configurations
1	.vscode/c_cpp_properties.json	/^                "\/usr\/include\/c++\/12",$/;"	s	array:configurations.0.includePath
2	.vscode/c_cpp_properties.json	/^                "\/usr\/include\/x86_64-linux-gnu\/c++\/12",$/;"	s	array:configurations.0.includePath
3	.vscode/c_cpp_properties.json	/^                "\/usr\/include\/c++\/12\/backward",$/;"	s	array:configurations.0.includePath
4	.vscode/c_cpp_properties.json	/^                "\/usr\/lib\/llvm-14\/lib\/clang\/14.0.0\/include",$/;"	s	array:configurations.0.includePath
5	.vscode/c_cpp_properties.json	/^                "\/usr\/local\/include",$/;"	s	array:configurations.0.includePath
6	.vscode/c_cpp_properties.json	/^                "\/usr\/include\/x86_64-linux-gnu",$/;"	s	array:configurations.0.includePath
7	.vscode/c_cpp_properties.json	/^                "\/usr\/include\/x86_64-linux-gnu"$/;"	s	array:configurations.0.includePath
BUFFER_SIZE	pipe.c	/^#define BUFFER_SIZE /;"	d	file:
CMAKE_CXX_FLAGS	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -no-pie -rdynamic")$/;"	v
CMAKE_C_FLAGS	CMakeLists.txt	/^set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -no-pie -rdynamic")$/;"	v
Cpp	CMakeLists.txt	/^project(Cpp)$/;"	p
Cube	abstract_class.cpp	/^Cube::Cube(float len) : Cuboid(len, len, len) {}$/;"	f	class:Cube
Cube	abstract_class.cpp	/^class Cube: public Cuboid {$/;"	c	file:
Cuboid	abstract_class.cpp	/^Cuboid::Cuboid(float len, float width, float height): Rec(len, width), m_height(height) {}$/;"	f	class:Cuboid
Cuboid	abstract_class.cpp	/^class Cuboid : public Rec{$/;"	c	file:
DEBUG_INFO	getopt_long.c	/^#define DEBUG_INFO(/;"	d	file:
DEFAULT_PID	fork.c	/^#define DEFAULT_PID /;"	d	file:
Line	abstract_class.cpp	/^Line::Line(float len): m_len(len) {}$/;"	f	class:Line
Line	abstract_class.cpp	/^class Line{$/;"	c	file:
LockToCPU	cpu.cpp	/^bool LockToCPU(int cpu_to_lock) {$/;"	f	typeref:typename:bool
MAX_STACK_FRAMES	cpu.cpp	/^#define MAX_STACK_FRAMES /;"	d	file:
MAX_STACK_FRAMES	signal.c	/^#define MAX_STACK_FRAMES /;"	d	file:
MAX_STR_SIZE	crypto.cpp	/^#define MAX_STR_SIZE /;"	d	file:
NUM_THREADS	pthread.c	/^#define NUM_THREADS /;"	d	file:
NUM_THREADS	pthread_kill.c	/^#define NUM_THREADS /;"	d	file:
PROC_NUM	fork.c	/^#define PROC_NUM /;"	d	file:
People	People.cpp	/^People::People(char *name, int age): m_name(name), m_age(age){}$/;"	f	class:People
People	People.h	/^class People {$/;"	c
Rec	abstract_class.cpp	/^Rec::Rec(float len, float width): Line(len), m_width(width) {}$/;"	f	class:Rec
Rec	abstract_class.cpp	/^class Rec : public Line{$/;"	c	file:
Teacher	Teacher.cpp	/^Teacher::Teacher(char *name, int age, int salary): People(name, age), m_salary(salary) {}$/;"	f	class:Teacher
Teacher	Teacher.h	/^class Teacher : public People{$/;"	c
_GNU_SOURCE	pthread.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	pthread_kill.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	signal.c	/^#define _GNU_SOURCE$/;"	d	file:
abstract_class	CMakeLists.txt	/^add_executable(abstract_class abstract_class.cpp)$/;"	t
addr2line	cpu.cpp	/^char* addr2line(const char* ptr, const char* elf_name) {$/;"	f	typeref:typename:char *
algorithm	.vscode/settings.json	/^        "algorithm": "cpp",$/;"	s	object:files.associations
area	abstract_class.cpp	/^float Cube::area() {$/;"	f	class:Cube	typeref:typename:float
area	abstract_class.cpp	/^float Cuboid::area() { return 2 * ($/;"	f	class:Cuboid	typeref:typename:float
area	abstract_class.cpp	/^float Rec::area() {$/;"	f	class:Rec	typeref:typename:float
array	.vscode/settings.json	/^        "array": "cpp",$/;"	s	object:files.associations
atexit	CMakeLists.txt	/^add_executable(atexit atexit.c)$/;"	t
atomic	.vscode/settings.json	/^        "atomic": "cpp",$/;"	s	object:files.associations
bit	.vscode/settings.json	/^        "bit": "cpp",$/;"	s	object:files.associations
cStandard	.vscode/c_cpp_properties.json	/^            "cStandard": "c17",$/;"	s	object:configurations.0
cctype	.vscode/settings.json	/^        "cctype": "cpp",$/;"	s	object:files.associations
checkResults	pthread_kill.c	/^static void checkResults(char* string, int rc) {$/;"	f	typeref:typename:void	file:
child_run	fork.c	/^int child_run() {$/;"	f	typeref:typename:int
clocale	.vscode/settings.json	/^        "clocale": "cpp",$/;"	s	object:files.associations
cmath	.vscode/settings.json	/^        "cmath": "cpp",$/;"	s	object:files.associations
compare	.vscode/settings.json	/^        "compare": "cpp",$/;"	s	object:files.associations
compilerPath	.vscode/c_cpp_properties.json	/^            "compilerPath": "\/usr\/bin\/clang++",$/;"	s	object:configurations.0
concepts	.vscode/settings.json	/^        "concepts": "cpp",$/;"	s	object:files.associations
configurations	.vscode/c_cpp_properties.json	/^    "configurations": [$/;"	a
configurations	.vscode/launch.json	/^    "configurations": []$/;"	a
const_cast	CMakeLists.txt	/^add_executable(const_cast const_cast.cpp)$/;"	t
cppStandard	.vscode/c_cpp_properties.json	/^            "cppStandard": "c++14",$/;"	s	object:configurations.0
cpu	CMakeLists.txt	/^add_executable(cpu cpu.cpp)$/;"	t
cpu_core_stat	cpustat.cpp	/^struct cpu_core_stat$/;"	s	file:
cpu_core_stat_pair	cpustat.cpp	/^struct cpu_core_stat_pair$/;"	s	file:
cpu_cores_occupy	cpustat.cpp	/^struct cpu_cores_occupy$/;"	s	file:
cpu_cores_occupy_call	cpustat.cpp	/^static void cpu_cores_occupy_call(struct cpu_cores_occupy *cco)$/;"	f	typeref:typename:void	file:
cpu_cores_occupy_display	cpustat.cpp	/^static void cpu_cores_occupy_display(struct cpu_cores_occupy *cco)$/;"	f	typeref:typename:void	file:
cpu_cores_occupy_get	cpustat.cpp	/^static void cpu_cores_occupy_get(struct cpu_cores_occupy *cco, int stat_idx \/*0-start, 1-end*\//;"	f	typeref:typename:void	file:
cpu_cores_occupy_init	cpustat.cpp	/^static int cpu_cores_occupy_init(struct cpu_cores_occupy *cco)$/;"	f	typeref:typename:int	file:
cpus_stat	cpustat.cpp	/^    struct cpu_core_stat_pair *cpus_stat;$/;"	m	struct:cpu_cores_occupy	typeref:struct:cpu_core_stat_pair *	file:
cpustat	CMakeLists.txt	/^add_executable(cpustat cpustat.cpp)$/;"	t
creat_proc	fork.c	/^int creat_proc(pid_t *pid, int num) {$/;"	f	typeref:typename:int
crypto	CMakeLists.txt	/^add_executable(crypto crypto.cpp)$/;"	t
cstdarg	.vscode/settings.json	/^        "cstdarg": "cpp",$/;"	s	object:files.associations
cstddef	.vscode/settings.json	/^        "cstddef": "cpp",$/;"	s	object:files.associations
cstdint	.vscode/settings.json	/^        "cstdint": "cpp",$/;"	s	object:files.associations
cstdio	.vscode/settings.json	/^        "cstdio": "cpp",$/;"	s	object:files.associations
cstdlib	.vscode/settings.json	/^        "cstdlib": "cpp",$/;"	s	object:files.associations
cwchar	.vscode/settings.json	/^        "cwchar": "cpp",$/;"	s	object:files.associations
cwctype	.vscode/settings.json	/^        "cwctype": "cpp",$/;"	s	object:files.associations
defines	.vscode/c_cpp_properties.json	/^            "defines": [],$/;"	a	object:configurations.0
deque	.vscode/settings.json	/^        "deque": "cpp",$/;"	s	object:files.associations
display	People.cpp	/^void People::display() {$/;"	f	class:People	typeref:typename:void
display	Teacher.cpp	/^void Teacher::display() {$/;"	f	class:Teacher	typeref:typename:void
dup	CMakeLists.txt	/^add_executable(dup dup.c)$/;"	t
exception	.vscode/settings.json	/^        "exception": "cpp",$/;"	s	object:files.associations
files.associations	.vscode/settings.json	/^    "files.associations": {$/;"	o
flag_exit	signal.c	/^volatile bool flag_exit = false;$/;"	v	typeref:typename:volatile bool
fork	CMakeLists.txt	/^add_executable(fork fork.c)$/;"	t
fstream	.vscode/settings.json	/^        "fstream": "cpp",$/;"	s	object:files.associations
func_1	atexit.c	/^void func_1(void) {$/;"	f	typeref:typename:void
func_2	atexit.c	/^void func_2(void) {$/;"	f	typeref:typename:void
func_3	atexit.c	/^void func_3(void) {$/;"	f	typeref:typename:void
functional	.vscode/settings.json	/^        "functional": "cpp",$/;"	s	object:files.associations
get_current_task_name	cpu.cpp	/^char* get_current_task_name() {$/;"	f	typeref:typename:char *
getopt	CMakeLists.txt	/^add_executable(getopt getopt.c)$/;"	t
getopt_long	CMakeLists.txt	/^add_executable(getopt_long getopt_long.c)$/;"	t
guest	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
guest_nice	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
handle_cmd	pipe.c	/^int handle_cmd(int cmd) { \/\/ 子进程的命令处理函数$/;"	f	typeref:typename:int
handle_signal	cpu.cpp	/^void handle_signal(int signum) {$/;"	f	typeref:typename:void
handle_signal	signal.c	/^void handle_signal(int signum) {$/;"	f	typeref:typename:void
handler	sigprocmask.c	/^void handler(int sig) {$/;"	f	typeref:typename:void
idle	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
ids	pthread.c	/^int ids[NUM_THREADS] = {1, 2, 3, 4};$/;"	v	typeref:typename:int[]
includePath	.vscode/c_cpp_properties.json	/^            "includePath": [$/;"	a	object:configurations.0
initializer_list	.vscode/settings.json	/^        "initializer_list": "cpp",$/;"	s	object:files.associations
intelliSenseMode	.vscode/c_cpp_properties.json	/^            "intelliSenseMode": "linux-clang-x64"$/;"	s	object:configurations.0
iosfwd	.vscode/settings.json	/^        "iosfwd": "cpp",$/;"	s	object:files.associations
iostream	.vscode/settings.json	/^        "iostream": "cpp",$/;"	s	object:files.associations
iowait	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
irq	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
istream	.vscode/settings.json	/^        "istream": "cpp",$/;"	s	object:files.associations
iterator	.vscode/settings.json	/^        "iterator": "cpp",$/;"	s	object:files.associations
limits	.vscode/settings.json	/^        "limits": "cpp",$/;"	s	object:files.associations
long_options	getopt_long.c	/^static struct option long_options[] = {$/;"	v	typeref:struct:option[]	file:
lopt	getopt_long.c	/^int lopt;$/;"	v	typeref:typename:int
m_age	People.h	/^    int m_age;$/;"	m	class:People	typeref:typename:int
m_height	abstract_class.cpp	/^    float m_height;$/;"	m	class:Cuboid	typeref:typename:float	file:
m_len	abstract_class.cpp	/^    float m_len;$/;"	m	class:Line	typeref:typename:float	file:
m_name	People.h	/^    char *m_name;$/;"	m	class:People	typeref:typename:char *
m_salary	Teacher.h	/^    int m_salary;$/;"	m	class:Teacher	typeref:typename:int
m_width	abstract_class.cpp	/^    float m_width;$/;"	m	class:Rec	typeref:typename:float	file:
main	abstract_class.cpp	/^int main() {$/;"	f	typeref:typename:int
main	atexit.c	/^int main(int argc,char **argv) {$/;"	f	typeref:typename:int
main	const_cast.cpp	/^int main()$/;"	f	typeref:typename:int
main	cpu.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	cpustat.cpp	/^int main()$/;"	f	typeref:typename:int
main	crypto.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	dup.c	/^int main() {$/;"	f	typeref:typename:int
main	fork.c	/^int main() {$/;"	f	typeref:typename:int
main	getopt.c	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	getopt_long.c	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	pipe.c	/^int main() {$/;"	f	typeref:typename:int
main	pthread.c	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	pthread_kill.c	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	reinterpret_cast.cpp	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	sigaction.c	/^int main() {$/;"	f	typeref:typename:int
main	signal.c	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	sigprocmask.c	/^int main() {$/;"	f	typeref:typename:int
main	string_char.cpp	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	virtual_function.cpp	/^int main() {$/;"	f	typeref:typename:int
main	wait.c	/^int main() {$/;"	f	typeref:typename:int
main	waitpid.c	/^int main() {$/;"	f	typeref:typename:int
memory	.vscode/settings.json	/^        "memory": "cpp",$/;"	s	object:files.associations
memory_resource	.vscode/settings.json	/^        "memory_resource": "cpp",$/;"	s	object:files.associations
name	.vscode/c_cpp_properties.json	/^            "name": "Linux",$/;"	s	object:configurations.0
new	.vscode/settings.json	/^        "new": "cpp",$/;"	s	object:files.associations
nice	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
nr_cpu_core	cpustat.cpp	/^    int nr_cpu_core;$/;"	m	struct:cpu_cores_occupy	typeref:typename:int	file:
numbers	.vscode/settings.json	/^        "numbers": "cpp",$/;"	s	object:files.associations
numeric	.vscode/settings.json	/^        "numeric": "cpp",$/;"	s	object:files.associations
occupy	cpustat.cpp	/^    long double occupy;$/;"	m	struct:cpu_core_stat_pair	typeref:typename:long double	file:
optional	.vscode/settings.json	/^        "optional": "cpp",$/;"	s	object:files.associations
ostream	.vscode/settings.json	/^        "ostream": "cpp",$/;"	s	object:files.associations
pipe	CMakeLists.txt	/^add_executable(pipe pipe.c)$/;"	t
print_opt_help	getopt_long.c	/^#define print_opt_help(/;"	d	file:
printids	pthread.c	/^void printids(const char *s) {$/;"	f	typeref:typename:void
program_name	crypto.cpp	/^static const char* program_name;$/;"	v	typeref:typename:const char *	file:
pthread	CMakeLists.txt	/^add_executable(pthread pthread.c)$/;"	t
pthread_kill	CMakeLists.txt	/^add_executable(pthread_kill pthread_kill.c)$/;"	t
random	.vscode/settings.json	/^        "random": "cpp",$/;"	s	object:files.associations
set	signal.c	/^sigset_t set;$/;"	v	typeref:typename:sigset_t
short_options	getopt_long.c	/^char* const short_options = ":vn::l:";$/;"	v	typeref:typename:char * const
sigaction	CMakeLists.txt	/^add_executable(sigaction sigaction.c)$/;"	t
signal	CMakeLists.txt	/^add_executable(signal signal.c)$/;"	t
signal_action	sigaction.c	/^void signal_action(int signum, siginfo_t* siginfo, void* myact) {$/;"	f	typeref:typename:void
signal_fn	signal.c	/^void *signal_fn(void* arg) {$/;"	f	typeref:typename:void *
signal_handler	cpu.cpp	/^void signal_handler() {$/;"	f	typeref:typename:void
signal_handler	pthread_kill.c	/^void signal_handler(int signum)$/;"	f	typeref:typename:void
signal_handler	sigaction.c	/^void signal_handler(int signum) {$/;"	f	typeref:typename:void
signal_handler	signal.c	/^void signal_handler() {$/;"	f	typeref:typename:void
sigprocmask	CMakeLists.txt	/^add_executable(sigprocmask sigprocmask.c)$/;"	t
softirq	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
sstream	.vscode/settings.json	/^        "sstream": "cpp",$/;"	s	object:files.associations
stat	cpustat.cpp	/^    struct cpu_core_stat stat[2]; \/\/ 0-start, 1-end$/;"	m	struct:cpu_core_stat_pair	typeref:struct:cpu_core_stat[2]	file:
stdexcept	.vscode/settings.json	/^        "stdexcept": "cpp",$/;"	s	object:files.associations
steal	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
streambuf	.vscode/settings.json	/^        "streambuf": "cpp",$/;"	s	object:files.associations
string	.vscode/settings.json	/^        "string": "cpp",$/;"	s	object:files.associations
string_char	CMakeLists.txt	/^add_executable(string_char string_char.cpp)$/;"	t
string_view	.vscode/settings.json	/^        "string_view": "cpp",$/;"	s	object:files.associations
system	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
system_error	.vscode/settings.json	/^        "system_error": "cpp",$/;"	s	object:files.associations
thr_fn	pthread.c	/^void* thr_fn(void* args) {$/;"	f	typeref:typename:void *
thread_fn	pthread_kill.c	/^void* thread_fn(void*parm) {$/;"	f	typeref:typename:void *
threads	pthread.c	/^pthread_t threads[NUM_THREADS];$/;"	v	typeref:typename:pthread_t[]
timer_fn	signal.c	/^void *timer_fn(void* arg) {$/;"	f	typeref:typename:void *
tuple	.vscode/settings.json	/^        "tuple": "cpp",$/;"	s	object:files.associations
type_traits	.vscode/settings.json	/^        "type_traits": "cpp",$/;"	s	object:files.associations
typeinfo	.vscode/settings.json	/^        "typeinfo": "cpp"$/;"	s	object:files.associations
unordered_map	.vscode/settings.json	/^        "unordered_map": "cpp",$/;"	s	object:files.associations
usage	crypto.cpp	/^void usage(int status)$/;"	f	typeref:typename:void
usage	getopt_long.c	/^void usage() {$/;"	f	typeref:typename:void
user	cpustat.cpp	/^    uint64_t user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice;$/;"	m	struct:cpu_core_stat	typeref:typename:uint64_t	file:
utility	.vscode/settings.json	/^        "utility": "cpp",$/;"	s	object:files.associations
vector	.vscode/settings.json	/^        "vector": "cpp",$/;"	s	object:files.associations
version	.vscode/c_cpp_properties.json	/^    "version": 4$/;"	n
virtual_function	CMakeLists.txt	/^add_executable(virtual_function People.cpp Teacher.cpp virtual_function.cpp)$/;"	t
volume	abstract_class.cpp	/^float Cube::volume() {$/;"	f	class:Cube	typeref:typename:float
volume	abstract_class.cpp	/^float Cuboid::volume() {$/;"	f	class:Cuboid	typeref:typename:float
wait	CMakeLists.txt	/^add_executable(wait wait.c)$/;"	t
wait_proc	fork.c	/^int wait_proc(pid_t *pid, int num) { \/\/ 阻塞等待多个子进程$/;"	f	typeref:typename:int
waitpid	CMakeLists.txt	/^add_executable(waitpid waitpid.c)$/;"	t
